@{
	ViewData["Title"] = "ViewDetail";
	Layout = "~/Views/Shared/_Layout.cshtml";
}

@using VetClinicCapstone.Models.ViewModel;




@model PetConsultViewModel


<div class="container-full">
	<section class="content">
		<div class="box">
			<div class="box-body">
		<div class="col-lg-12">
			<div class="row">
				<div class="col-lg-2 col-md-4 col-sm-6 col-xs-12">
					<span style="margin-left: 8px;">@Model.PatientTbls.PatientName</span>
					<div class="image-container" style="margin: 8px 8px;">
						@{
							var getFileName = Model.PatientTbls.FileName;
							if (!string.IsNullOrEmpty(getFileName))
							{
								<img src="@Url.Content("~/PetImage/" + getFileName)" alt="Image" class="img-fluid rounded" style="width: 170px; height: 170px;" />
							}
							else
							{
								<img src="~/images/avatar/1.jpg" alt="Pet Image" class="img-fluid rounded" style="width: 170px; height: 170px;">
							}
						}
					</div>
					<form asp-action="ImageUpload" method="post" enctype="multipart/form-data" class="mt-2 needs-validation" novalidate>
						<input type="hidden" name="id" value="@Model.PatientTbls.Patient_ID" />
						<div class="mb-3">
							<label for="imageFile" class="form-label">Upload Image</label>
							<input type="file" id="imageFile" name="imageFile" class="form-control" aria-label="file example" required accept=".jpeg,.png">
							<div class="invalid-feedback">
								Please select a valid image file (.jpeg, .png).
							</div>
						</div>
						<button type="submit" class="btn btn-primary btn-block">Upload</button>
					</form>
				</div>
				<script>

					(function () {
						'use strict'


						var forms = document.querySelectorAll('.needs-validation')


						Array.prototype.slice.call(forms)
							.forEach(function (form) {
								form.addEventListener('submit', function (event) {
									if (!form.checkValidity()) {
										event.preventDefault()
										event.stopPropagation()
									}

									form.classList.add('was-validated')
								}, false)
							})
					})()
				</script>
				<div class="col-lg-10">
@* 					<button data-toggle="modal" data-target=".AddPrescription" class="btn btn-rounded btn-outline-success pull-right mb-15 text-dark" data-patient-id="@Model.PatientTbls.Patient_ID">New Prescription</button>
 *@					<div class="table-responsive">
						<table id="example1" class="table table-bordered table-striped">
							<thead>
								<tr>

									<th>#</th>
									<th>Services</th>
									<th>Diagnosis</th>
									<th>Consult By</th>
									<th>Date</th>
									<th>Option</th>

								</tr>
							</thead>
							<tbody>
								@foreach (var item in Model.ConsultationWithDoctorViewModels)
								{
									<tr>
										<td>C-@item.ConsultationTbls.Consultation_ID-ID</td>
										<td>@item.ServiceTbls.ServiceName</td>
										<td>@item.ConsultationTbls.Diagnosis</td>
										<td>@item.DoctorTbls.Firstname</td>
										<td>@item.ConsultationTbls.ConsultationDate.ToString("MMMM d, yyyy h:mm tt")</td>
										<td>
											<a asp-action="MedicalInformation" asp-controller="Patient" asp-route-id="@item.ConsultationTbls.Consultation_ID" class="btn-sm btn-primary">View</a>
										</td>
									</tr>
								}
							</tbody>
						</table>
					</div>
				</div>
			</div>
		</div>
		</div>
		</div>
	</section>
</div>



<!-------------------Prescription Modal------------------------>


<div class="modal AddPrescription fade bs-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true" style="display: none;">
	<div class="modal-dialog modal-lg">
		<div class="modal-content">
			<div class="modal-header">
				<h4 class="modal-title" id="myLargeModalLabel">Prescription</h4>
				<button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
			</div>
			<div class="modal-body">
				<div class="container mt-5">
					<h2 class="text-center">Prescription Form</h2>
					<form id="prescriptionForm" class="prescription-form needs-validation" novalidate>
						<input type="hidden" id="patientid" name="patientId" placeholder="Patient ID" readonly>
						<input type="text" id="disease" name="disease" placeholder="Disease" required>

						<div class="row">
							<div class="form-group col-lg-6">
								<label for="dosage">Dosage</label>
								<input type="text" class="form-control" id="dosage" placeholder="Dosage" required>
								<div class="invalid-feedback">Please enter a dosage.</div>
							</div>
						</div>
						<div class="row">
							<div class="form-group col-lg-6">
								<label for="frequency">Frequency</label>
								<input type="text" class="form-control" id="frequency" placeholder="Frequency" required>
								<div class="invalid-feedback">Please enter a frequency.</div>
							</div>
							<div class="form-group col-lg-6">
								<label for="instructions">Instructions</label>
								<input type="text" class="form-control" id="Instruction" placeholder="Instructions" required>
								<div class="invalid-feedback">Please enter instructions.</div>
							</div>
						</div>
						<button type="button" class="btn btn-primary" onclick="addPrescription()">Add Prescription</button>
					</form>

					<h3 class="text-center mt-4">Prescriptions</h3>
					<div class="table-responsive">
						<table class="table table-bordered mt-3">
							<thead>
								<tr>
									<th>#</th>
									<th>Dosage</th>
									<th>Frequency</th>
									<th>Instructions</th>
									<th>Actions</th>
								</tr>
							</thead>
							<tbody id="prescriptionsList"></tbody>
						</table>
					</div>
				</div>
			</div>
			<div class="modal-footer text-right">
				<button data-dismiss="modal" type="button" class="btn btn-rounded btn-warning btn-outline mr-1">
					<i class="ti-trash"></i> Close
				</button>
				<button id="SavePrescription" onclick="confirmSavePrescriptions()" type="button" class="text-right btn btn-rounded btn-primary btn-outline">
					<i class="ti-save-alt"></i> Save
				</button>
			</div>
		</div>
		<!-- /.modal-content -->
	</div>
	<!-- /.modal-dialog -->
</div>

<script>
	let prescriptions = [];

	function addPrescription() {
		const form = document.getElementById('prescriptionForm');
		if (!form.checkValidity()) {
			form.classList.add('was-validated');
			return;
		}

		const dosage = document.getElementById('dosage').value;
		const frequency = document.getElementById('frequency').value;
		const instruction = document.getElementById('Instruction').value;

		const prescription = {
			Dosage: dosage,
			Frequency: frequency,
			Instruction: instruction
		};

		prescriptions.push(prescription);
		renderPrescriptions();
		clearForm();
	}

	function renderPrescriptions() {
		const prescriptionsList = document.getElementById('prescriptionsList');
		prescriptionsList.innerHTML = '';
		prescriptions.forEach((prescription, index) => {
			prescriptionsList.innerHTML += `
				<tr>
					<td>${index + 1}</td>
					<td>${prescription.Dosage}</td>
					<td>${prescription.Frequency}</td>
					<td>${prescription.Instruction}</td>
					<td><button type="button" class="btn btn-danger" onclick="removePrescription(${index})">Remove</button></td>
				</tr>
			`;
		});
	}

	function clearForm() {
		document.getElementById('dosage').value = '';
		document.getElementById('frequency').value = '';
		document.getElementById('Instruction').value = '';
		const form = document.getElementById('prescriptionForm');
		form.classList.remove('was-validated');
	}

	function removePrescription(index) {
		prescriptions.splice(index, 1);
		renderPrescriptions();
	}

	function confirmSavePrescriptions() {
		Swal.fire({
			title: 'Are you sure?',
			text: "Do you want to save these prescriptions?",
			icon: 'warning',
			showCancelButton: true,
			confirmButtonColor: '#3085d6',
			cancelButtonColor: '#d33',
			confirmButtonText: 'Yes, save it!'
		}).then((result) => {
			if (result.isConfirmed) {
				savePrescriptions();
			}
		});
	}

	function savePrescriptions() {
		const url = "/SavePrescriptions"; // Adjust the endpoint according to your server setup
		const patientId = document.getElementById('patientid').value;
		const disease = document.getElementById('disease').value;

		const requestBody = {
			Patient_ID: patientId,
			Disease: disease,
			Prescriptions: prescriptions
		};

		console.log('Saving prescriptions:', requestBody); // Debugging line to check request body

		fetch(url, {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json'
			},
			body: JSON.stringify(requestBody)
		}).then(response => {
			if (response.ok) {
				Swal.fire(
					'Saved!',
					'Your prescriptions have been saved.',
					'success'
				).then(() => {
					window.location.reload();
				});
			} else {
				Swal.fire(
					'Error!',
					'There was an issue saving your prescriptions.',
					'error'
				);
			}
		}).catch(error => {
			console.error('Error:', error);
			Swal.fire(
				'Error!',
				'There was an issue saving your prescriptions.',
				'error'
			);
		});
	}

	$(document).ready(function () {
		$('.AddPrescription').on('show.bs.modal', function (event) {
			var button = $(event.relatedTarget); // Button that triggered the modal
			var patientId = button.data('patient-id'); // Extract info from data-* attributes
			var modal = $(this);
			modal.find('.modal-body #patientid').val(patientId);
		});
	});
</script>



